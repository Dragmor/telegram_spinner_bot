from modules.imports import *

'''
–º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞, –≤—ã–≤–æ–¥—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫.
–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è, –∞ –≤ –ë–î —é–∑–µ—Ä–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
'''

class LangSelector():
    def __init__(self, parent, limit: int) -> None:
        self.parent = parent     
        self.title = "üí¨‚ùî" # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
        # –ø—Ä–∏–≤—è–∑—ã–≤–∞—é –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ 
        self.parent.dp.register_callback_query_handler(self.handle, lambda c: c.data.startswith("lang"))   
        self.limit = int(limit) # —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        self.pages = None

    async def create_buttons(self, message, page=0, command_launch=True, edit_message_id=None) -> None:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /, –∏–ª–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if command_launch:
            # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π
            await message.delete()
            
        # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page = page
        if self.pages == None:
            await self.get_pages_count()        
        # —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        offset = current_page * self.limit
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ë–î —Ñ–ª–∞–≥, –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∏ ISO
        result = await self.parent.db_manager.get_data(query=f"SELECT flag, name, iso FROM langs LIMIT {self.limit} OFFSET {offset}")
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        if result:
            keyboard = InlineKeyboardMarkup(row_width=1)
            for flag, name, iso in result:
                callback_data = f"lang=={iso}"
                # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–µ —Ç–µ–∫—Å—Ç: —Ñ–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
                button = InlineKeyboardButton(text=f"{flag} {name}", callback_data=callback_data)
                keyboard.add(button)

            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            buttons = []
            # –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∏–Ω–¥ –∫–Ω–æ–ø–æ–∫
            buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page {current_page-1}"))
            current_page_button_text = f"[{current_page + 1}/{self.pages}]"
            buttons.append(InlineKeyboardButton(text=current_page_button_text, callback_data="current_page"))
            buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page {current_page+1}"))
            # —Å–æ–∑–¥–∞—ë–º —Å—Ç–æ–ª—å–∫–æ —Ä—è–¥–æ–≤ –≤ –Ω–∏—Ö–Ω–µ–º —Å—Ç—Ä–æ–∫–µ, —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–∫–µ buttons
            keyboard.row(*buttons)

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            if edit_message_id is not None:
                # –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ —é–∑–µ—Ä–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (–∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫)
                try:
                    await self.parent.bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=edit_message_id, reply_markup=keyboard)
                # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
                except:
                    await self.parent.bot.delete_message(chat_id=message.chat.id, message_id=edit_message_id)
            else:
                await message.answer(text=self.title, reply_markup=keyboard)


    async def handle(self, call: CallbackQuery, state: FSMContext) -> None:
        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞

        # –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ –æ—Ç–ø—Ä–µ–¥–µ–ª—è—é –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        if self.pages == None:
            await self.get_pages_count()

        # –µ—Å–ª–∏ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —Ç–æ
        if call.data.startswith("page"):
            # –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
            current_page = int(call.data.split()[-1])
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è-–ª–∏ –º—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if current_page < 0:
                current_page = 0
                return
            elif current_page > self.pages-1:
                current_page = self.pages-1
                return
            
        # –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if call.data.startswith("page"):
            # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await self.create_buttons(message=call.message, page=current_page, first_launch=False, edit_message_id=call.message.message_id)
        # –ï—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        elif call.data != "current_page":
            lang = call.data.split("==")[-1]
            # —Ç—É—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ –æ —Ç–æ–º, –∫–∞–∫–æ–π —è–∑—ã–∫ –±—ã–ª –≤—ã–±—Ä–∞–Ω (–Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–Ω)
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
            # await call.answer(f"{lang}")
            # –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            # await self.parent.bot.edit_message_text(text=f"You selected language: {lang}", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
            # –≤–Ω–æ—à—É iso –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ –ë–î —é–∑–µ—Ä—É
            await self.parent.db_manager.write_data(query=f"UPDATE users SET iso = '{lang}' WHERE ids = {call['from']['id']}")
            # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            await call.message.delete()
            await state.finish()

            # –∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞ –∏–∑ –ë–î –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
            await modules.user_commands.settings.load_commands.load_commands(parent=self.parent, user_id=call['message']['chat']['id'])
            
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª —é–∑–µ—Ä
            await modules.user_commands.settings.check_user.check_user_data(parent=self.parent, user_id=call['message']['chat']['id'], message=call.message)
            

    async def get_pages_count(self) -> None:
        # –º–µ—Ç–æ–¥ –∑–∞–¥–∞—ë—Ç –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å —è–∑—ã–∫–∞–º–∏
        self.pages = await self.parent.db_manager.get_data(query=f"SELECT COUNT(*) FROM langs")
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤ –µ—Å—Ç—å –≤ –ë–î, –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å (–¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è)
        self.pages = (self.pages[0][0] // self.limit) + (1 if self.pages[0][0] % self.limit > 0 else 0)
