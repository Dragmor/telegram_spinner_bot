from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
#
import modules.chat_manager

'''
–º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞, –≤—ã–≤–æ–¥—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫.
–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏ –≤ –ë–î —é–∑–µ—Ä–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞
'''

class GenderSelector():
    def __init__(self, parent) -> None:
        self.parent = parent     
        self.title = "üë®‚ùìüë±‚Äç‚ôÄÔ∏è" # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ 
        self.parent.dp.register_callback_query_handler(self.handle, lambda c: c.data.startswith("gender"))  

    async def create_buttons(self, message) -> None:
        # —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞

        # –∏–∑–≤–ª–µ–∫–∞–µ–º iso —é–∑–µ—Ä–∞
        iso = await self.parent.db_manager.get_data(query=f"SELECT iso FROM users WHERE ids = {message['chat']['id']}")
        # –µ—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω, —Ç–æ —Å—Ç–∞–≤–ª—é eng
        if iso == None or iso[0][0] == "0":
            iso = "eng"
        # –µ—Å–ª–∏ –∂–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ, —Ç–æ
        else:
            iso = iso[0][0]
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ë–î –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–µ–Ω–¥–µ—Ä–∞ –Ω–∞ —è–∑—ã–∫–µ ISO
        result = await self.parent.db_manager.get_data(query=f"SELECT flag, name, gender FROM genders WHERE iso = '{iso}'")
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        if result:
            keyboard = InlineKeyboardMarkup(row_width=1)
            for flag, name, gender in result:
                callback_data = f"gender=={gender}"
                # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–µ —Ç–µ–∫—Å—Ç: —Ñ–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
                button = InlineKeyboardButton(text=f"{flag} {name}", callback_data=callback_data)
                keyboard.add(button)

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
            await message.answer(text=self.title, reply_markup=keyboard)

    async def handle(self, call: CallbackQuery, state: FSMContext) -> None:
        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞

        # –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        gender = call.data.split("==")[-1]
        # –≤–Ω–æ—à—É –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –≤ –ë–î
        await self.parent.db_manager.write_data(query=f"UPDATE users SET gender = '{gender}' WHERE ids = {call['from']['id']}")
        # —É–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        await self.parent.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await state.finish()
        
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª —é–∑–µ—Ä
        await modules.user_commands.settings.check_user.check_user_data(parent=self.parent, user_id=call['message']['chat']['id'], message=call.message)
